# -*- coding: utf-8 -*-
"""
Created on Mon Jan  6 17:47:40 2020

Input) a full path for directory with .pkl files **from the same mouse** generated by photometry_rawplot.py 

Output)  
    a) plot all individual traces
    b) plot average traces from the same stimuli 
    c) plot AUC and peak for all stimuli as a bar graph
    d) .pkl file with one dataframe for a single mouse with: 
            mouseID, date, stimulus, dFF 
    e) .csv file with AUC and peak values
    

****************************************************************************************************
    
3. photometry_grouplot: reads updated pkl files, make group plots by different categories.

    
@author: Heeun Jang
"""
#%%
#import scipy.io as sio
#from scipy.signal import decimate
from scipy.integrate import simps
from scipy import signal
import pandas as pd
import os
import glob
import matplotlib.pyplot as plt
import numpy as np
import pickle as pk

import math
#import subprocess


# path = r"C:\Users\heeun\Dropbox\Garrison Lab, Buck Institute\Garrison Lab - Heeun\Data_Dropbox_Sync\Fiber_Photometry_new_ZK_dropbox\Photometry_by_mice\HW7f20\all"
print("Enter the full path of directory with .pkl files to analyze: ")
path = input()

analysis_path = path + "/analysis" 
if not os.path.exists(analysis_path):
    os.makedirs(analysis_path)            

## make sure this is in the order you want to present in the plots
all_stimulus_list   = ["3MNaCl", "2MNaCl", "1MNaCl", "PEG", "AngII", "saline"]
palette_temp        = [["3MNaCl", "black"], ["2MNaCl", "maroon"], ["1MNaCl", "chocolate"],["saline", "gray"], 
                       ["PEG", "darkblue"], ["AngII", "darkmagenta"]] # set colors 
# color names can be founed here: https://matplotlib.org/2.0.2/examples/color/named_colors.html

palette             = pd.DataFrame(palette_temp, columns = ["stimulus", "color"])


ds_factor1       = 5
ds_factor2       = 5
ds_factor3       = 2
ds_factor        = ds_factor1*ds_factor2*ds_factor3

sm_factor        = 61

pre_length_min   = 10 ## pre-treatment minutes to find AUC or peak values 

frame_rate            = 1017.2527
all_files             = glob.glob(path + "/*.pkl")
file_list             = []
stimulus_temp_list    = []
tempdata              = {}  ## Save data into a dataframe
data                  = pd.DataFrame(columns = ["expID", "mouseID", "expdate", "stimulus",
                                          "time_sec", "time_sec_ds", "dFF_ds",
                                          "dFF_ds_sm", "dFF_ds_sm_peak", "dFF_ds_sm_scaled"])

data["time_sec"]          = data["time_sec"].astype(object) 
data["time_sec_ds"]       = data["time_sec_ds"].astype(object)
data["dFF_ds"]            = data["dFF_ds"].astype(object)
data["dFF_ds_sm"]         = data["dFF_ds_sm"].astype(object)
data["dFF_ds_sm_scaled"]  = data["dFF_ds_sm_scaled"].astype(object)

mindFF_list      = [0.0]
min_length_list  = []

## smoothing 
def smooth (x, window_len, window='hanning'):
        if x.ndim != 1:
                raise ValueError ("smooth only accepts 1 dimension arrays.")
        if x.size < window_len:
                raise ValueError ("Input vector needs to be bigger than window size.")
        if window_len<3:
                return x
        if not window in ['flat', 'hanning', 'hamming', 'bartlett', 'blackman']:
                raise ValueError ("Window is on of 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'")
        s=np.r_[2*x[0]-x[window_len-1::-1],x,2*x[-1]-x[-1:-window_len:-1]]
        if window == 'flat': #moving average
                w=np.ones(window_len,'d')
        else:  
                w=eval('np.'+window+'(window_len)')
        y=np.convolve(w/w.sum(),s,mode='same')
        return y[window_len:-window_len+1]



## Go through each file in the path to save the data into a single dataframe
for i, file_path in enumerate (all_files):
    expID            = file_path[(len(path)+1):-4] ## previous called as "file_name_cut
    file_list.append(expID)  
    inputfile = open(file_path, 'rb')
    tempdata[expID]  = pk.load(inputfile)
    inputfile.close()

    stim                     = expID.split("_")[-1]
    print(stim)
    stimulus_temp_list.append(stim)
    
    data.at[i, "expID"]          = expID
    # mouseID                      = tempdata[expID]["mouseID"]
    mouseID                      = expID.split("_")[0]
    data.at[i, "mouseID"]        = mouseID
    data.at[i, "expdate"]        = expID.split("_")[1]
    
    data.at[i, "stimulus"]       = stim

    data.at[i, "time_sec"]       = tempdata[expID]["time_sec"]
    try:
        data.at[i, "time_sec_ds"] = tempdata[expID]["time_sec_ds"]   
        
    except: 
        data.at[i, "time_sec_ds"] = tempdata[expID]["time_sec"][::ds_factor] ## take every 50th element from the list
        
    data.at[i, "dFF_ds_sm_peak"]    = tempdata[expID]["dFF_sm_peak"]
    
    try: 
        data.at[i, "dFF_ds_sm"]   = tempdata[expID]["dFF_ds_sm"]

    except:
        ##  downsample all time series by a factor of 50 (1000Hz >> 20Hz. 1ms >> 50ms exposure time )       		
        temp_trace                = signal.decimate(tempdata[expID]["dFF"], ds_factor1)
        temp_trace                = signal.decimate(temp_trace, ds_factor2)
        data.at[i, "dFF_ds"]      = signal.decimate(temp_trace, ds_factor3)
        data.at[i, "dFF_ds_sm"]   = smooth(data.at[i, "dFF_ds"], window_len = sm_factor)

        
    data.at[i, "dFF_ds_sm_scaled"] = data.at[i, "dFF_ds_sm"]/data.at[i, "dFF_ds_sm_peak"]

    minlendFF_temp  = len(data.at[i, "time_sec_ds"])
    min_length_list.append(minlendFF_temp)
    mindFF_temp     = np.min(data.at[i, "dFF_ds_sm"])
    mindFF_list.append(mindFF_temp)
   
            
stimulus_temp_list = list(set(stimulus_temp_list))    ## Remove repeated stimuli 
stimulus_list      = [x for x in all_stimulus_list if x in stimulus_temp_list]

print ("files analyzed are: %s" %file_list)
print ("stimuli are: %s" %stimulus_list)

mouseID   = data.at[0, "mouseID"]

#%%##########################################################################
#   Plot all individual dFF plots
#############################################################################

data.stimulus = pd.Categorical(data.stimulus, categories = stimulus_list)
data.sort_values("stimulus", inplace = True)
data = data.reset_index (drop = True)

num         = len(data)
colperpage  = 4
rowperpage  = 4
numpages    = (num-1)//(colperpage*rowperpage) + 1
plotlist    = []

maxdFF      = np.max(data["dFF_ds_sm_peak"])
mindFF      = np.min(np.array(mindFF_list))

## plot all individual traces    
if numpages == 1 :
    k = 0 
    fig, ax         = plt.subplots(squeeze = False, figsize = (4*colperpage, 2.5*rowperpage))   
    for i in range(num):
        ax          = plt.subplot2grid((rowperpage, colperpage), ((i//colperpage)%rowperpage, i%colperpage), rowspan=1, colspan=1)  
        legend      = data.at[i, "mouseID"] + "_" + data.at[i, "stimulus"] + "_" + str(data.at[i, "age_mo"]) + "mo"
        color_ind   = palette.index[palette["stimulus"]== data.at[i, "stimulus"]].tolist()

        plt.plot(data.at[i, "time_sec_ds"]/60, data.at[i, "dFF_ds_sm"], c = palette.at[color_ind[0], "color"], linewidth = 2)
        ax.set_title(legend, fontsize = 14)
        ax.tick_params(axis = "both", which = "major", labelsize = 12)
        ax.set_xlabel("time (min)", fontsize = 12)
        ax.set_ylabel("dFF (%)", fontsize = 12)
        ax.set_ylim(np.min(mindFF)*1.05, maxdFF*1.05)
#        ax.annotate(data.at[i, "estrus"], xy=(40, np.min(mindFF)+(maxdFF-np.min(mindFF))/4*3), fontsize = 12)
#        ax.legend(text, loc="upper right", fontsize = 12)
    suptitle = mouseID + "_traces" + str(k+1)
    plt.suptitle("%s" %suptitle, fontsize = 18)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])     
    plt.savefig(analysis_path + "/" + suptitle + ".png")
    plt.savefig(analysis_path + "/" + suptitle + ".pdf")
    plt.show()   
    
else:   ## if iterate
    for k in range(numpages):       ## save into embedded lists 
        if k == (numpages - 1):     ## if last page
            temp  =  [i for i in np.arange(num) if i >= 15*k]   
            print ("k is %d, temp is %s" %(k, temp))
        else:
            temp  =  [i + k*15 for i in np.arange(colperpage*rowperpage)]
            print ("k is %d, temp is %s" %(k, temp))
        plotlist.append(temp)     
    
    for k, plots in zip(np.arange(numpages), plotlist):
        fig, ax     = plt.subplots(rowperpage, colperpage, figsize = (4*colperpage, 2.5*rowperpage))  
        for i in plots:
            ax      = plt.subplot2grid((rowperpage, colperpage), ((i//colperpage)%rowperpage, i%colperpage), rowspan=1, colspan=1)  
            legend  = data.at[i, "mouseID"] + "_" + data.at[i, "stimulus"] + "_" + str(data.at[i, "age_mo"]) + "mo"
            color_ind   = palette.index[palette["stimulus"]== data.at[i, "stimulus"]].tolist()
            plt.plot(data.at[i, "time_sec_ds"]/60, data.at [i, "dFF_ds_sm"], c = palette.at[color_ind[0], "color"], linewidth = 2)
            ax.set_title(legend, fontsize = 14)
            ax.tick_params(axis = "both", which = "major", labelsize = 12)
            ax.set_xlabel("time (min)", fontsize = 12)
            ax.set_ylabel("dFF (%)", fontsize = 12)
            ax.set_ylim(np.min(mindFF)*1.05, maxdFF*1.05) 
#            ax.annotate(data.at[i, "estrus"], xy=(40, np.min(mindFF)+(maxdFF-np.min(mindFF))/4*3), fontsize = 12)
        suptitle = mouseID + "_traces" + str(k+1)
        plt.suptitle("%s" %suptitle, fontsize = 18)
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])     
        plt.savefig(analysis_path + "/" + suptitle + ".png")
        plt.savefig(analysis_path + "/" + suptitle + ".pdf")
        plt.show()

#%%##########################################################################
#   Plot all mean dFF plots
#############################################################################

## if trace length is slightly off, trim the long one
minlendFF  = np.min(np.array(min_length_list))
for i in np.arange(len(data)):
    data.at[i, "time_sec_ds"]      = data.at[i, "time_sec_ds"][:minlendFF]
    data.at[i, "dFF_ds_sm"]        = data.at[i, "dFF_ds_sm"][:minlendFF]
    # data.at[i, "dFF_sm_scaled"] = data.at[i, "dFF_sm_scaled"][:minlendFF]   
time_sec    = data.at[0, "time_sec_ds"]

grouped     = data.groupby("stimulus")

meandFF     = grouped["dFF_ds_sm"].apply(np.mean)
stddFF      = grouped["dFF_ds_sm"].apply(lambda x: np.std(np.array(x)))

## Make a figure
num         = len(grouped)
colperpage  = 3
rowperpage  = 3
numpages    = (num-1)//(colperpage*rowperpage) + 1
plotlist    = []
minage_list = []

stim_color_list   = []
if numpages == 1 :
    k = 0 
    fig, ax         = plt.subplots(squeeze = False, figsize = (6*colperpage, 4*rowperpage))       
    for i, stim in enumerate(stimulus_list):  
        ax          = plt.subplot2grid((rowperpage, colperpage), ((i//colperpage)%rowperpage, i%colperpage), rowspan=1, colspan=1)       
        maxage      = grouped["age_mo"].max()[stim]
        minage      = grouped["age_mo"].min()[stim]
        minage_list.append(minage)
        size        = grouped["dFF_ds_sm"].agg(np.size)[stim]
        color       = palette[palette["stimulus"] == stim]["color"].values[0]
        stim_color_list.append(color)
        legend      = mouseID + " " + stim + " n=%d trials" %size
        
        mean        = meandFF[stim]
        if size > 1:
            ste   = stddFF[stim]/math.sqrt(size-1)
        else: 
            ste   = stddFF[stim]*0
    #    markers, caps, bars = plt.errorbar(time_sec/60, mean, yerr = ste, fmt='-', linewidth = 4, ecolor = "darkgray", elinewidth = 1.5)       
    #    markers.set_color(color)
    #    [bar.set_alpha(0.1) for bar in bars]
        plt.plot(time_sec/60, mean, linewidth = 4, color = color)
    
        for j in np.arange(size):
            plt.plot(time_sec/60, grouped.get_group(stim)["dFF_ds_sm"].values[j], linewidth = 2, color = "dimgrey", alpha = 0.5)
        plt.axvline(x = 0, linewidth = 2, linestyle = "--", color = "gray")
        plt.title(legend, fontsize = 20)
        plt.tick_params(axis = "both", which = "major", labelsize = 18)
        plt.xlabel("time (min)", fontsize = 18)
        plt.ylabel("dFF (%)", fontsize = 18)
        plt.ylim(np.min(mindFF)*1.05, maxdFF*1.05) 
    suptitle = mouseID + "_" + str(minage) + "mo_mean" + str(k+1)
    plt.suptitle("%s" %suptitle, fontsize = 20)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])     
    plt.savefig(analysis_path + "/" + suptitle + ".png")
    plt.savefig(analysis_path + "/" + suptitle + ".pdf")
    plt.show()     

#%%##########################################################################
#   Plot all mean dFF plots, normalized to peak value
#############################################################################

## if trace length is slightly off, trim the long one
minlendFF  = np.min(np.array(min_length_list))
for i in np.arange(len(data)):
    data.at[i, "time_sec_ds"]       = data.at[i, "time_sec_ds"][:minlendFF]
    data.at[i, "dFF_ds_sm_scaled"]  = data.at[i, "dFF_ds_sm_scaled"][:minlendFF]
    # data.at[i, "dFF_sm_scaled"] = data.at[i, "dFF_sm_scaled"][:minlendFF]   
time_sec    = data.at[0, "time_sec_ds"]

grouped     = data.groupby("stimulus")

meandFF     = grouped["dFF_ds_sm_scaled"].apply(np.mean)
stddFF      = grouped["dFF_ds_sm_scaled"].apply(lambda x: np.std(np.array(x)))

## Make a figure
num         = len(grouped)
colperpage  = 3
rowperpage  = 3
numpages    = (num-1)//(colperpage*rowperpage) + 1
plotlist    = []
minage_list = []

stim_color_list   = []
if numpages == 1 :
    k = 0 
    fig, ax         = plt.subplots(squeeze = False, figsize = (6*colperpage, 4*rowperpage))       
    for i, stim in enumerate(stimulus_list):  
        ax          = plt.subplot2grid((rowperpage, colperpage), ((i//colperpage)%rowperpage, i%colperpage), rowspan=1, colspan=1)       
        size        = grouped["dFF_ds_sm"].agg(np.size)[stim]
        color       = palette[palette["stimulus"] == stim]["color"].values[0]
        stim_color_list.append(color)
        legend      = mouseID + " " + stim + " (n=%d trials)" %(size)
        
        mean        = meandFF[stim]
        if size > 1:
            ste   = stddFF[stim]/math.sqrt(size-1)
        else: 
            ste   = stddFF[stim]*0
    #    markers, caps, bars = plt.errorbar(time_sec/60, mean, yerr = ste, fmt='-', linewidth = 4, ecolor = "darkgray", elinewidth = 1.5)       
    #    markers.set_color(color)
    #    [bar.set_alpha(0.1) for bar in bars]
        plt.plot(time_sec/60, mean, linewidth = 4, color = color)
    
        for j in np.arange(size):
            plt.plot(time_sec/60, grouped.get_group(stim)["dFF_ds_sm_scaled"].values[j], linewidth = 2, color = "dimgrey", alpha = 0.5)
        plt.axvline(x = 0, linewidth = 2, linestyle = "--", color = "gray")
        plt.title(legend, fontsize = 20)
        plt.tick_params(axis = "both", which = "major", labelsize = 18)
        plt.xlabel("time (min)", fontsize = 18)
        plt.ylabel("dFF (%)", fontsize = 18)
        # plt.ylim(np.min(mindFF)*1.05, maxdFF*1.05) 
        plt.ylim(-0.1, 1.1)
    suptitle = mouseID + "_scaled_mean" + str(k+1)
    plt.suptitle("%s" %suptitle, fontsize = 20)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])     
    plt.savefig(analysis_path + "/" + suptitle + ".png")
    plt.savefig(analysis_path + "/" + suptitle + ".pdf")
    plt.show()     

                 

#%%################################################################
#   Area under the curve and peak values
###################################################################
## ADD a range to find peak 
frame_start_for_peak = np.int(pre_length_min*60*frame_rate/ds_factor) 
frame_start_for_AUC  = np.int(pre_length_min*60*frame_rate/ds_factor) 

## add new columns to the dataframe
data.assign(dFF_sm_peak = np.nan, dFF_sm_AUC = np.nan)

for i in range(len(data)):                                                                                                                          
    data.at[i, "dFF_ds_sm_peak_range"] = np.max(data.at[i, "dFF_ds_sm"][frame_start_for_peak:])
    data.at[i, "dFF_ds_sm_AUC"]        = simps(data.at[i, "dFF_ds_sm"][frame_start_for_AUC:]) 
grouped     = data.groupby("stimulus")


AUC           = {}
peak          = {}
AUC_max_temp  = np.array([0])
peak_max_temp = np.array([0])
for i, stim in enumerate(stimulus_list):
    AUC[stim]   = grouped.get_group(stim)["dFF_ds_sm_AUC"].values
    peak[stim]  = grouped.get_group(stim)["dFF_ds_sm_peak_range"].values    
    np.append(AUC_max_temp, np.max(AUC[stim]))
    np.append(peak_max_temp, np.max(peak[stim]))
AUC_max         = np.max(AUC_max_temp)
peak_max        = np.max(peak_max_temp)
    
x_positions = np.arange(1, len(grouped.groups)+1, 1)
bar_width   = 0.75 


########################################################################
#   print AUC and peak mean values on screen
########################################################################
filename = analysis_path + "/" + mouseID + "_all_AUC_peak" + ".csv"
data[["expID", "dFF_ds_sm_AUC", "dFF_ds_sm_peak_range"]].to_csv(filename)

filename = analysis_path + "/" + mouseID + "_mean_AUC" + ".csv"
grouped["dFF_ds_sm_AUC"].mean().to_csv(filename, header = "True")

filename = analysis_path + "/" + mouseID + "_mean_peak" + ".csv"
grouped["dFF_ds_sm_peak_range"].mean().to_csv(filename, header = "True")

 
########################################################################
#   SAVE the entire DATAFRAME into a .pkl file
########################################################################
suptitle = mouseID + "_allstim"
data.to_pickle(analysis_path + "/" + suptitle + ".pkl")


# ##################################################
# #   POP open the analysis folder
# ##################################################
os.startfile(analysis_path)
